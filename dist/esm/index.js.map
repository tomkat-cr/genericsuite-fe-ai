{"version":3,"file":"index.js","sources":["../../src/lib/components/ChatBot/chatbot.general.functions.jsx","../../src/lib/components/ChatBot/VoiceMessageRecorder.jsx","../../src/lib/components/ChatBot/chatbot.db.operations.jsx","../../src/lib/components/ChatBot/FileUploader.jsx","../../node_modules/style-inject/dist/style-inject.es.js","../../src/lib/components/ChatBot/CameraComponent.jsx","../../src/lib/components/ChatBot/UserInput.jsx","../../src/lib/components/ChatBot/NewConversationButton.jsx","../../src/lib/components/ChatBot/ConversationList.jsx","../../src/lib/components/ChatBot/ConversationsToggleButton.jsx","../../src/lib/components/ChatBot/AudioPlayer.jsx","../../src/lib/components/ChatBot/GoToTheBottom.jsx","../../src/lib/components/ChatBot/ScrollToBottomButton.jsx","../../src/lib/components/ChatBot/ChatCodeBlock.jsx","../../src/lib/components/ChatBot/ConversationBlock.jsx","../../src/lib/components/ChatBot/ChatBot.jsx","../../src/lib/components/App/App.jsx","../../src/lib/components/ChatBotButton/ChatBotButton.jsx","../../src/lib/index.cjs"],"sourcesContent":["import * as gs from \"genericsuite\";\n\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\n\nexport const setChatbotErrorMsg = (errorMsg, dispatch) => {\n    dispatch({ type: 'SET_ERROR_MSG', payload: errorMsg });\n}\n\nexport const setChatbotInputMessage = (inputMessage, dispatch) => {\n    dispatch({ type: 'SET_INPUT_MESSAGE', payload: inputMessage });\n}\n\nexport const addMessageToConversation = (newMessage, role, dispatch) => {\n    const systemMessage = { content: newMessage, role: role };\n    dispatch({ type: 'ADD_MESSAGE', payload: systemMessage });\n\n}\n\nexport const dispatchWaitAnimation = (waitAnimationFlag, dispatch) => {\n    dispatch({ type: 'API_PROCESSING_STATUS', payload: waitAnimationFlag })\n}\n\nexport const setConversationListToggle = (conversationListToggle, dispatch) => {\n    if (debug) {\n        console_debug_log(`setConversationListToggle | conversationListToggle: ${conversationListToggle}`);\n    }\n    dispatch({ type: 'SET_CONVERSATION_LIST_TOGGLE', payload: conversationListToggle });\n}\n","import React, {useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nimport * as gs from \"genericsuite\";\n\nimport {\n    setChatbotErrorMsg,\n    dispatchWaitAnimation,\n} from './chatbot.general.functions.jsx';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faMicrophone,\n//     faStop,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faMicrophone,\n//     faStop,\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst dbApiService = gs.dbService.dbApiService;\nconst MULTIPART_FORM_DATA_HEADER = gs.dbService.MULTIPART_FORM_DATA_HEADER;\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst formatCaughtError = gs.errorAndReenter.formatCaughtError;\nconst toggleIdVisibility = gs.ui.toggleIdVisibility;\nconst getMediaTypeToRecord = gs.media.getMediaTypeToRecord;\nconst mediaSupported = gs.media.mediaSupported;\nconst BUTTON_LISTING_CLASS = gs.classNameConstants.BUTTON_LISTING_CLASS;\n\nconst debug = false;\n\nconst extControlsToShowHide = ['user_input', 'user_input_submit', 'fileUploader', 'cameraComponent'];\n\nconst useMicRecorder = false;\nconst useAxios = (process.env.REACT_APP_USE_AXIOS || \"1\") == \"1\";\n\nexport const VoiceMessageRecorder = ({\n    id,\n    setExternalInputMessage,\n    handleUpdateSize,\n    dispatch,\n    sendMessage,\n}) => {\n    const [isRecording, setIsRecording] = useState(false);\n    const [audioData, setAudioData] = useState(null);\n    const [errorMsg, setErrorMsg] = useState(null);\n    const mediaRecorderRef = useRef(null);\n\n    const startRecording = async () => {\n        toggleIdVisibility(\"off\", extControlsToShowHide);\n        setIsRecording(true);\n        setErrorMsg(null);\n        if (useMicRecorder) {\n            startMicRecording();\n        } else {\n            startMediaDevices();\n        }\n    }\n\n    const startMicRecording = async () => {\n        setErrorMsg(\"MicRecorder is not implemented...\");\n\n        // // npm install mic-recorder-to-mp3\n        // const MicRecorder = require('mic-recorder-to-mp3');\n        // const recorder = new MicRecorder({\n        //     bitRate: 128\n        // });\n        // mediaRecorderRef.current = recorder;\n\n        // // Start recording. Browser will request permission to use your microphone.\n        // mediaRecorderRef.current.start().then(() => {\n        //     // something else\n        // }).catch((e) => {\n        //     console.error(e);\n        //     const errorMsgAux = 'We could not start recording:';\n        //     console.error(errorMsg, e);\n        //     setIsRecording(false);\n        //     setErrorMsg(`${errorMsgAux} ${e.message}`);\n        // });\n    };\n    \n    const startMediaDevices = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const mediaType = getMediaTypeToRecord();\n\n            if (debug) console_debug_log(`VoiceMessageRecorder | startRecording | extension: ${mediaType[\"extension\"]}`);\n            if (debug) console_debug_log(\"mediaSupported\", mediaSupported());\n\n            // Set the MediaRecorder options   \n            const mediaRecorder = new MediaRecorder(stream, mediaType[\"options\"]);\n            mediaRecorderRef.current = mediaRecorder;\n\n            // Handle the data available event\n            const chunks = [];  \n            mediaRecorder.ondataavailable = (e) => {\n                chunks.push(e.data);\n            };\n\n            // Handle the stop event\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(chunks, { type: `audio/${mediaType[\"extension\"]}` });\n                setAudioData(blob);\n            };\n\n            // Start recording\n            mediaRecorder.start(1000);\n\n        } catch (error) {\n            const errorMsgAux = 'Error starting recording:';\n            console.error(errorMsg, error);\n            setIsRecording(false);\n            setErrorMsg(`${errorMsgAux} ${error.message}`);\n            toggleIdVisibility(\"on\", extControlsToShowHide);\n        }\n    };\n\n    const stopRecording = () => {\n        if (useMicRecorder) {\n            stopMicRecording();\n        } else {\n            stopMediaDevices();\n        }\n    };\n    \n    const stopMicRecording = () => {\n        if (mediaRecorderRef.current) {\n            setIsRecording(false);\n\n            // Once you are done singing your best song, stop and get the mp3.\n            mediaRecorderRef.current\n                .stop()\n                .getMp3().then(([buffer, blob]) => {\n                    // do what ever you want with buffer and blob\n                    setAudioData(blob);\n                    // // Example: Create a mp3 file and play\n                    // const file = new File(buffer, 'me-at-thevoice.mp3', {\n                    //     type: blob.type,\n                    //     lastModified: Date.now()\n                    // });\n                    // const player = new Audio(URL.createObjectURL(file));\n                    // player.play();\n                }).catch((e) => {\n                    const errorMsgAux = 'We could not retrieve your message:';\n                    console.error(errorMsg, e);\n                    setIsRecording(false);\n                    setErrorMsg(`${errorMsgAux} ${e.message}`);\n                });\n        }\n    };\n\n    const stopMediaDevices = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n            mediaRecorderRef.current.stop();\n            setIsRecording(false);\n        }\n    };\n\n    const sendFile = async (url, formData, authHeader, queryParams) => {\n        const headers = Object.assign(\n            { \n                'Access-Control-Allow-Origin': '*',\n            }, \n            authHeader\n        );\n        try {\n            const response = await axios.post(url, formData, {\n                headers: headers,\n                params: queryParams,\n            });\n            // Hide WaitAnimation after fetching data\n            dispatchWaitAnimation(false, dispatch);\n            if (debug) {\n                console_debug_log('[FA] VoiceMessageRecorder is calling setExternalInputMessage', response.data);\n            }\n            // Send the transcript to the input text box\n            setExternalInputMessage(response.data.response);\n            // Restore buttons in the input text area\n            toggleIdVisibility(\"on\", extControlsToShowHide);\n            // Update the size of the input text area if the handleUpdateSize function is provided.\n            if (handleUpdateSize) {\n                handleUpdateSize();\n            }\n            // Send the message if the sendMessage function is provided (automatic send functionality).\n            if (sendMessage) {\n                sendMessage();\n            }\n        } catch (errorRaw) {\n            console.error(errorRaw);\n            // Hide WaitAnimation after the error\n            const error = errorRaw.message + (typeof errorRaw.response !== 'undefined' ?  \": \" + errorRaw.response.data : '');\n            // Hide WaitAnimation after the error\n            dispatchWaitAnimation(false, dispatch);\n            // Restore buttons in the input text area\n            toggleIdVisibility(\"on\", extControlsToShowHide);\n            // Send error message to the chatbot\n            console.error('[FA] Error sending voice message:', error);\n            setErrorMsg(error.message);\n        }\n    };\n\n    useEffect(() => {\n        if (debug) {\n            console_debug_log(`VoiceMessageRecorder | useEffect() of sendVoiceMessage | isRecording: ${isRecording}`);\n        }\n        const sendVoiceMessage = async () => {\n            if (!audioData) {\n                return;\n            }\n            // Prepare the audit to send to the API\n            const formData = new FormData();\n            const extension = audioData.type.split('/')[1];\n            const fileName = `voiceMessage.${extension}`;\n            // const appleDevice = MediaRecorder.isTypeSupported('audio/mpeg');\n            const appleDevice = extension === 'mp4';\n            const sourceLang = (appleDevice ? 'get_user_lang' : 'auto');\n            const other = (appleDevice ? 'no_mp3_native_support' : '');\n            formData.append('file', audioData, fileName);\n            const options = {\n                raw_body: true,\n                headers: MULTIPART_FORM_DATA_HEADER\n            };\n            const query_params = {\n                \"extension\": extension,\n                \"source_lang\": sourceLang,\n                \"other\": other,\n            }\n            const db = new dbApiService({ url: \"ai/voice_to_text\" });\n            if (debug) {\n                console_debug_log(`VoiceMessageRecorder | sendVoiceMessage | fileName: ${fileName}`);\n            }\n            // Clear previous message in the input text area\n            setExternalInputMessage('');\n            // Update the size of the input text area if the handleUpdateSize function is provided.\n            // if (handleUpdateSize) {\n            //     handleUpdateSize();\n            // }\n            // Clear audio data\n            setAudioData(null);\n            // Show WaitAnimation while fetching data\n            dispatchWaitAnimation(true, dispatch);\n            if (useAxios) {\n                const authHeader = gs.authHeader.authHeader();\n                const endpointUrl = `${process.env.REACT_APP_API_URL}/${\"ai/voice_to_text\"}`;\n                await sendFile(endpointUrl, formData, authHeader, query_params)\n            } else {\n                db.getAll(query_params, formData, 'POST', options).then(\n                    data => {\n                        if (debug) {\n                            console_debug_log(\"VoiceMessageRecorder | sendVoiceMessage | data:\", data);\n                        }\n                        // Hide WaitAnimation after fetching data\n                        dispatchWaitAnimation(false, dispatch);\n                        if (debug) {\n                            console_debug_log('VoiceMessageRecorder is calling setExternalInputMessage', data.response);\n                        }\n                        // Send the transcript to the input text box\n                        setExternalInputMessage(data.response);\n                        // Restore buttons in the input text area\n                        toggleIdVisibility(\"on\", extControlsToShowHide);\n                        // Update the size of the input text area if the handleUpdateSize function is provided.\n                        // if (handleUpdateSize) {\n                        //     handleUpdateSize();\n                        // }\n                        // Send the message if the sendMessage function is provided (automatic send functionality).\n                        if (sendMessage) {\n                            sendMessage();\n                        }\n                    },\n                    error => {\n                        error = formatCaughtError(error);\n                        if (debug) {\n                            console_debug_log(\"VoiceMessageRecorder | sendVoiceMessage | ERROR:\", error);\n                        }\n                        // Hide WaitAnimation after the error\n                        dispatchWaitAnimation(false, dispatch);\n                        // Restore buttons in the input text area\n                        toggleIdVisibility(\"on\", extControlsToShowHide);\n                        // Send error message to the chatbot\n                        console.error('Error sending voice message:', error);\n                        setErrorMsg(error.message);\n                    }\n                );\n            }\n        };\n        if (!isRecording && audioData) {\n            sendVoiceMessage();\n        }\n    }, [isRecording, audioData, setExternalInputMessage, handleUpdateSize, dispatch, sendMessage]);\n\n    useEffect(() => {\n        if (errorMsg != null) {\n            setChatbotErrorMsg(`Error processing the voice message: ${errorMsg}`, dispatch);\n        }\n    }, [errorMsg, dispatch]);\n\n    return (\n        <div\n            id={id}\n            className=\"voice-recorder\"\n        >\n            <button\n                onClick={isRecording ? stopRecording : startRecording}\n                className={`${BUTTON_LISTING_CLASS} mr-2`}\n                title={isRecording ? 'Stop Recording' : 'Start Recording'}\n            >\n                {/* <FontAwesomeIcon icon={isRecording ? 'stop' : 'microphone'} size='lg' /> */}\n                <GsIcons icon={isRecording ? 'stop' : 'microphone'} size='lg' />\n            </button>\n        </div>\n    );\n};\n","import * as gs from \"genericsuite\";\n\nconst formatCaughtError = gs.errorAndReenter.formatCaughtError;\nconst dbApiService = gs.dbService.dbApiService;\nconst defaultValue = gs.genericEditorUtilities.defaultValue;\nconst console_debug_log = gs.loggingService.console_debug_log;\n\n// Ensure to install the crypto library with: npm install crypto\n// import crypto from 'crypto';\n\nconst debug = false;\n\n// Current user\n\nexport const getCurrentUserId = (dispatch) => {\n    // if(debug) {\n        console_debug_log(\">>--> getCurrentUserId\");\n    // }\n    const state = dispatch({ type: 'GET_CURRENT_USER', payload: null });\n    if (typeof state !== \"undefined\" && state !== null) {\n        return state.currentUser.id;\n    }\n    return null;\n}\n\n// DB: generic calls\n\nexport let abortController = null; // Define this outside your component or in a useRef if you need to persist the controller across renders without causing re-renders.\n\nexport const ApiCall = async (\n    dispatch,\n    params,\n) => {\n    const getActionName = (operationType) => {\n        let response;\n        switch (operationType) {\n            case \"getAll\":\n                response = \"load\";\n                break;\n            case \"getOne\": \n                response = \"load\";\n                break;\n            case \"createRow\": \n                response = \"creation\";\n                break;\n            case \"updateRow\": \n                response = \"update\";\n                break;\n            case \"deleteRow\": \n                response = \"deletion\";\n                break;\n            default:\n                response = \"[invalid operation]\";\n        }\n        return response;\n    }\n\n    const getRequestMethod = (operationType) => {\n        let response;\n        switch (operationType) {\n            case \"getAll\":\n            case \"getOne\": \n                response = \"GET\";\n                break;\n            case \"createRow\": \n                response = \"POST\";\n                break;\n            case \"updateRow\": \n                response = \"PUT\";\n                break;\n            case \"deleteRow\": \n                response = \"DELETE\";\n                break;\n            default:\n                response = \"[invalid operation]\";\n        }\n        return response;\n    }\n\n    const processGoodResponse = (data) => {\n        if (debug) {\n            console_debug_log(`AiAssistant | ${operationName} | data:`, data);\n        }\n        if (responseAttrName !== \"\" && typeof data[responseAttrName] === \"undefined\") {\n            return {\n                ok: false,\n                response: null,\n                errorMessage: `Element ${responseAttrName} not found in the API response`,\n            }\n        }\n        return {\n            ok: !data.error,\n            response: (responseAttrName === \"\" ? data : data[responseAttrName]),\n            errorMessage: data.error_message,\n        }\n    }\n\n    const processErrorResponse = (errorRaw) => {\n        const error = formatCaughtError(errorRaw);\n        if (debug) {\n            console_debug_log(`AiAssistant | ${operationName} | ERROR:`, error);\n        }\n        return {\n            ok: false,\n            errorMessage: error.message,\n        }\n    }\n\n    const verifyId = (id) => {\n        return {\n            ok: (id !== null),\n            errorMessage: (id !== null ? \"\" : `Missing ID: ${id}`),\n        }\n    }\n\n    const the= \"the\";\n    const was_successful = \"was successful\";\n    const error_in_the =  \"error in the\";\n\n    const operationType = defaultValue(params, \"operationType\");\n    const operationName = defaultValue(params, \"operationName\", \"ApiCall\");\n    const operationDescription = defaultValue(params, \"operationDescription\", operationName);\n    const ActionDescription = defaultValue(params, \"ActionDescription\", getActionName(operationType));\n    const endpointUrl = defaultValue(params, \"endpointUrl\");\n    const requestMethod = defaultValue(params, \"requestMethod\", getRequestMethod(operationType));\n    const id = defaultValue(params, \"id\", null);\n    const query = defaultValue(params, \"query\", {});\n    const body = defaultValue(params, \"body\", {});\n    const options = defaultValue(params, \"options\", {});\n    const responseAttrName = defaultValue(params, \"responseAttrName\", \"resultset\");\n\n    let response; \n    const db = new dbApiService({ url: endpointUrl });\n    if (debug) {\n        console_debug_log(\n            `AiAssistant | ${operationName} | operationType: ${operationType}, requestMethod: ${requestMethod}, endpointUrl:`,\n            endpointUrl, 'body:', body, 'query:', query, 'options:', options, 'id:', id,\n        );\n    }\n    // Set API processing status\n    dispatch({ type: 'API_PROCESSING_STATUS', payload: true });\n    try {\n        switch (operationType) {\n            case \"getAll\":\n                response = await db.getAll(query, body, requestMethod, options).then(\n                    data => { return processGoodResponse(data) },\n                    error => { return processErrorResponse(error) }\n                );\n                break;\n            case \"getOne\":\n                response = await db.getOne(query, options).then(\n                    data => { return processGoodResponse(data) },\n                    error => { return processErrorResponse(error) }\n                );\n                break;\n            case \"createRow\":\n                response = await db.createRow(body, query, options).then(\n                    data => { return processGoodResponse(data) },\n                    error => { return processErrorResponse(error) }\n                );\n                break;\n            case \"updateRow\":\n                response = verifyId(id);\n                if (response.ok) {\n                    response = await db.updateRow(id, body, query, options).then(\n                        data => { return processGoodResponse(data) },\n                        error => { return processErrorResponse(error) }\n                    );\n                }\n                break;\n            case \"deleteRow\":\n                response = verifyId(id);\n                if (response.ok) {\n                    response = await db.deleteRow(id, body, query, options).then(\n                        data => { return processGoodResponse(data) },\n                        error => { return processErrorResponse(error) }\n                    );\n                }\n                break;\n            default:\n                response = {\n                    ok: false,\n                    errorMessage: `Invalid operation type: \"${operationType}\"`,\n                }\n        }\n    } catch (error) {\n        response = {\n            ok: false,\n            errorMessage: error.message,\n        }\n    }\n    if (response.ok) {\n        response.operationMessage = `${the} ${operationDescription} ${ActionDescription} ${was_successful}`;\n    } else {\n        response.operationMessage = `${error_in_the} ${operationDescription} ${ActionDescription}`;\n        console_debug_log('ApiCall ERROR:');\n        console_debug_log(response.operationMessage);\n    }\n    dispatch({ type: 'API_PROCESSING_STATUS', payload: false }); // Clear API processing status\n    if (debug) {\n        console_debug_log(`AiAssistant | ${operationName} | response:`, response);\n    }\n    return response;\n}\n\n// const sendMessageToBot = async (messageText) => {\n//     try {\n//         const response = await fetch('http://yourapi.com/path-to-bot', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify({ message: messageText }),\n//             signal: abortController.signal\n//         });\n//         if (response.ok) {\n//             const data = await response.json();\n//             // Assuming the response includes the bot's reply in data.reply\n//             return data.reply;\n//         } else {\n//             throw new Error('Bot API responded with an error.');\n//         }\n//     } catch (error) {\n//         console.error('Error communicating with the bot:', error);\n//         return null; // Handle error appropriately\n//     }\n// };\n\n// DB: Conversation List\n\n// const generateNewConversationId = () => {\n//     return crypto.randomUUID();\n// };\n\nexport const checkConversationIdChange = async (state, dispatch, externalApiResponse) => {\n    let cid = state.currentConversationId;\n    let apiResponse;\n    // if (debug) {\n        console_debug_log(`>> checkConversationIdChange | cid: ${cid} | externalApiResponse:`, externalApiResponse);\n    // }\n    if (typeof externalApiResponse['cid'] !== 'undefined' && \n        state.currentConversationId !== externalApiResponse['cid']\n    ) {\n        cid = externalApiResponse['cid'];\n        // dispatch({ type: 'SET_CONVERSATION_ID', payload: cid });\n        //\n        // Reload and refresh conversation list\n        apiResponse = await fetchConversations(dispatch);\n        if (!apiResponse.ok) {\n            console.error(\"ERROR in checkConversationIdChange > fetchConversations\");\n            console.error(apiResponse.operationMessage);\n            console.error(apiResponse.errorMessage);\n        }\n    }\n    // Always refresh current conversation to get the latest Chatbot response\n    if (debug) {\n        console_debug_log(`checkConversationIdChange | REFRESH CURRENT CONVERSATION`);\n    }\n    if (cid !== null) {\n        apiResponse = await fetchOneConversation(cid, dispatch);\n        if (!apiResponse.ok) {\n            console.error(\"ERROR in checkConversationIdChange > fetchOneConversation\");\n            console.error(apiResponse);\n            console.error(apiResponse.operationMessage);\n            console.error(apiResponse.errorMessage);\n        }\n    }\n    return cid;\n}\n\nexport const loadConversationList = async (dispatch) => {\n    const currentUserId = getCurrentUserId(dispatch);\n    const response = ApiCall(\n        dispatch,\n        {\n            operationName: \"loadConversationList\",\n            operationDescription: \"Conversation list\",\n            operationType: \"getAll\",\n            endpointUrl: \"ai_chatbot_conversations\",\n            query: {\n                user_id: currentUserId,\n            }\n        }\n    );\n    return response;\n};\n\nexport const fetchConversations = async (dispatch) => {\n    const apiResponse = await loadConversationList(dispatch);\n    if (apiResponse.ok) {\n        dispatch({ type: 'SET_CONVERSATIONS', payload: apiResponse.response });\n    }\n    return apiResponse;\n};\n\nconst fetchOneConversation = async (conversationId, dispatch) => {\n    const apiResponse = await loadConversation(conversationId, dispatch);\n    if (debug) {\n        console_debug_log(`fetchOneConversation | conversationId: ${conversationId} | apiResponse:`, apiResponse);\n    }\n    if (apiResponse.ok) {\n        const data = {\n            conversationId: conversationId,\n            messages: apiResponse.response.messages,\n        }\n        dispatch({ type: 'SET_MESSAGES', payload: data });\n    }\n    return apiResponse;\n};\n\n// DB: Conversations\n\n// const saveConversation = async (conversationId, conversation, dispatch) => {\n//     const conversationAddition = {user_id: currentUserId}\n//     const response = ApiCall(\n//         dispatch,\n//         {\n//             operationName: \"saveConversation\",\n//             operationDescription: \"Conversation\",\n//             operationType: (conversationId === null ? \"createRow\" : \"updateRow\"),\n//             if: conversationId,\n//             endpointUrl: \"ai_chatbot_conversations\",\n//             body: {...conversation, conversationAddition},\n//         }\n//     );\n//     return response;\n// };\n\nexport const loadConversation = async (conversationId, dispatch) => {\n    const currentUserId = getCurrentUserId(dispatch);\n    const response = ApiCall(\n        dispatch,\n        {\n            operationName: \"loadConversation (one)\",\n            operationDescription: \"Conversation\",\n            operationType: \"getOne\",\n            endpointUrl: \"ai_chatbot_conversations\",\n            query: {\n                user_id: currentUserId,\n                id: conversationId,\n            }\n        }\n    );\n    return response;\n};\n\nexport const deleteConversation = async (conversationId, dispatch) => {\n    const currentUserId = getCurrentUserId(dispatch);\n    const response = ApiCall(\n        dispatch,\n        {\n            operationName: \"deleteConversation\",\n            operationDescription: \"Conversation\",\n            operationType: \"deleteRow\",\n            id: conversationId,\n            endpointUrl: \"ai_chatbot_conversations\",\n            query: {\n                user_id: currentUserId,\n            }\n        }\n    );\n    return response;\n};\n\n// BOT API management\n\nexport const sendMessageToBot = async (messageText, state, dispatch) => {\n    // Set the fetch() abort controller\n    if (abortController) {\n        if (debug) {\n            console_debug_log(`AiAssistant | sendMessageToBot | ABORTING PREVIOUS REQUEST`);\n        }\n        abortController.abort(); // Abort previous request if it exists\n    }\n    abortController = new AbortController(); // Create a new controller for the new request\n    const chatToSend = [\n        // ...state.messages,\n        {\"role\": \"user\", \"content\": messageText}\n    ];\n    const response = ApiCall(\n        dispatch,\n        {\n            operationName: \"sendMessageToBot\",\n            operationDescription: \"Communication with AiAssistant\",\n            operationType: \"getAll\",\n            endpointUrl: \"ai/chatbot\",\n            requestMethod: \"POST\",\n            body: {\n                \"conversation\": JSON.stringify(chatToSend),\n                \"cid\": state.currentConversationId\n            },\n            responseAttrName: \"\",\n            options: {\n                signal: abortController.signal,\n            },\n        }\n    );\n    if (debug) {\n        console_debug_log('AiAssistant | sendMessageToBot | response:', response);\n    }\n    if (response.ok) {\n        checkConversationIdChange(state, dispatch, response);\n    }\n\n    return response;\n};\n\nexport const handleCancelProcessing = (dispatch) => {\n    if (abortController) abortController.abort(); // Abort the ongoing request\n    dispatch({ type: 'API_PROCESSING_STATUS', payload: false }); // Clear API processing status\n};\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport * as gs from \"genericsuite\";\n\nimport {\n    setChatbotErrorMsg,\n    addMessageToConversation,\n    dispatchWaitAnimation,\n} from './chatbot.general.functions.jsx';\nimport { checkConversationIdChange } from './chatbot.db.operations.jsx';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faArrowUp,\n//     faTimes,\n//     faPaperclip, // Added clip icon\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faArrowUp, // Select file + Upload\n//     faTimes, // Close\n//     faPaperclip, // Added clip icon\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst dbApiService = gs.dbService.dbApiService;\nconst MULTIPART_FORM_DATA_HEADER = gs.dbService.MULTIPART_FORM_DATA_HEADER;\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst formatCaughtError = gs.errorAndReenter.formatCaughtError;\nconst toggleIdVisibility = gs.ui.toggleIdVisibility;\nconst BUTTON_LISTING_CLASS = gs.classNameConstants.BUTTON_LISTING_CLASS;\n\nconst debug = false;\n\nconst useAxios = (process.env.REACT_APP_USE_AXIOS || \"1\") == \"1\";\n\nexport function FileUploader({\n    id,\n    setExternalInputMessage,\n    handleUpdateSize,\n    dispatch,\n    state,\n    question,\n    fileTypeFilter,\n}) {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [buttonToggle, setButtonToggle] = useState(false);\n\n    const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            if (fileTypeFilter) {\n                // \"image/*\"\n                if (file.type.startsWith('image/')) {\n                    setSelectedFile(file);\n                } else {\n                    alert('Please selecct a valid image file.');\n                }\n            } else {\n                setSelectedFile(file);\n            }\n        }\n    };\n\n    const sendFile = async (url, formData, authHeader, queryParams) => {\n        const headers = Object.assign(\n            { \n                'Access-Control-Allow-Origin': '*',\n            }, \n            authHeader\n        );\n        try {\n            const response = await axios.post(url, formData, {\n                headers: headers,\n                params: queryParams,\n            });\n            dispatchWaitAnimation(false, dispatch);\n            checkConversationIdChange(state, dispatch, response.data).then(\n                () => {\n                    // Current conversation updated sucssesfuly\n                },\n                error => {\n                    error = formatCaughtError(error);\n                    setChatbotErrorMsg(error.message, dispatch);\n                }\n            );\n            setSelectedFile(null);\n            setButtonToggle(false);\n        } catch (errorRaw) {\n            console.error(errorRaw);\n            // Hide WaitAnimation after the error\n            const error = errorRaw.message + (typeof errorRaw.response !== 'undefined' ?  \": \" + errorRaw.response.data : '');\n            console.error('Error uploading the file:', error);\n            setChatbotErrorMsg(error, dispatch);\n            dispatchWaitAnimation(false, dispatch);\n        }\n    };\n\n    const handleUpload = async () => {\n        if (selectedFile) {\n            const formData = new FormData();\n            const fileSize = (selectedFile.size / (1024 * 1024)).toFixed(2); // Mb\n            formData.append('file', selectedFile, selectedFile.name);\n            const options = {\n                raw_body: true,\n                headers: MULTIPART_FORM_DATA_HEADER\n            };\n            const query = {\n                \"cid\": state.currentConversationId,\n                question: question,\n                // image_extension: fileExtension,\n                file_name: selectedFile.name,\n            }\n            addMessageToConversation(question, \"user\", dispatch)\n            addMessageToConversation(\n                '```File Attachment: \"' + selectedFile.name + '\" (' + fileSize + ' Mb)```', \"attachment\",\n                dispatch\n            )\n            // Empty external input message\n            setExternalInputMessage(\"\");\n            // Update the size of the input text area if the handleUpdateSize function is provided.\n            if (handleUpdateSize) {\n                handleUpdateSize();\n            }\n            // Show WaitAnimation while fetching data\n            dispatchWaitAnimation(true, dispatch);\n            if (debug) {\n                console_debug_log(`FileUploader | selectedFile:`, selectedFile);\n            }\n            if (useAxios) {\n                const authHeader = gs.authHeader.authHeader();\n                const endpointUrl = `${process.env.REACT_APP_API_URL}/${\"ai/image_to_text\"}`;\n                await sendFile(endpointUrl, formData, authHeader, query)\n            } else {\n                const db = new dbApiService({ url: \"ai/image_to_text\" });\n                db.getAll(query, formData, 'POST', options).then(\n                    data => {\n                        if (debug) {\n                            console_debug_log(\"FileUploader | handleUpload | data:\", data);\n                        }\n                        dispatchWaitAnimation(false, dispatch);\n                        if (debug) {\n                            console_debug_log(`FileUploader is calling checkConversationIdChange(\"${data}\")`);\n                        }\n                        // addMessageToConversation(data.response, \"assistant\", dispatch);\n                        checkConversationIdChange(state, dispatch, data).then(\n                            () => {\n                                // Current conversation updated sucssesfuly\n                            },\n                            error => {\n                                error = formatCaughtError(error);\n                                if (debug) {\n                                    console_debug_log(\"FileUploader | checkConversationIdChange | ERROR:\", error);\n                                }\n                                setChatbotErrorMsg(error.message, dispatch);\n                            }\n                        );\n                        setSelectedFile(null);\n                        setButtonToggle(false);\n                    },\n                    errorRaw => {\n                        // Hide WaitAnimation after the error\n                        const error = formatCaughtError(errorRaw);\n                        if (debug) {\n                            console_debug_log(\">>--> FileUploader | handleUpload | errorRaw:\", errorRaw);\n                        }\n                        dispatchWaitAnimation(false, dispatch);\n                        console.error('Error uploading the file:', error);\n                        // setExternalErrorMsg(error.message);\n                        setChatbotErrorMsg(error.message, dispatch);\n                        if (debug) {\n                            console_debug_log(\"FileUploader | after setExternalErrorMsg...\");\n                        }\n                    }\n                );\n            }\n        } else {\n            alert('Please select a file to upload.');\n        }\n    };\n\n    useEffect(() => {\n        const extControlsToShowHide = ['user_input_submit', 'voiceMessageRecorder', 'cameraComponent'];\n        toggleIdVisibility((buttonToggle ? \"off\" : \"on\"), extControlsToShowHide);\n    }, [buttonToggle]);\n\n    return (\n        <div\n            id={id}\n            className=\"file-uploader\"\n        >\n            <div\n                className=\"flex items-center\"\n            >\n                <button\n                    onClick={() => setButtonToggle(buttonToggle ? false : true)}\n                    className={`${BUTTON_LISTING_CLASS} mr-2`}\n                    title={buttonToggle ? 'Close' : 'Select File'}\n                >\n                    {/* <FontAwesomeIcon icon={buttonToggle ? 'times' : 'paperclip'} size='lg' /> */}\n                    <GsIcons icon={buttonToggle ? 'times' : 'paperclip'} size='lg' />\n                </button>\n                {buttonToggle && (\n                    <div className='flex items-center'>\n                        <input\n                            type=\"file\"\n                            accept={fileTypeFilter ? fileTypeFilter : \"*\"}\n                            onChange={handleFileChange}\n                            className='p-0 m-0'\n                        />\n                        <button\n                            onClick={handleUpload}\n                            className={`${BUTTON_LISTING_CLASS}`}\n                            title='Submit'\n                        >\n                            {/* <FontAwesomeIcon icon='arrow-up' size='lg'/> */}\n                            <GsIcons icon='arrow-up' size='lg'/>\n                        </button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState, useRef } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport {\n    dispatchWaitAnimation,\n    addMessageToConversation,\n    setChatbotErrorMsg,\n} from './chatbot.general.functions.jsx';\nimport { checkConversationIdChange } from './chatbot.db.operations.jsx';\n\nimport './CameraComponent.css';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faArrowUp,\n//     faTimes,\n//     faCamera, // Camera\n//     faCameraRetro, // Icon for taking the photo\n//     faExchangeAlt, // Icon for interchange\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faArrowUp, // Arrow-up: to select file + perform the upload\n//     faTimes, // X: to close the component controls\n//     faCamera, // Camera\n//     faCameraRetro, // Icon for taking the photo\n//     faExchangeAlt, // Icon for interchange\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst dbApiService = gs.dbService.dbApiService;\nconst MULTIPART_FORM_DATA_HEADER = gs.dbService.MULTIPART_FORM_DATA_HEADER;\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst formatCaughtError = gs.errorAndReenter.formatCaughtError;\nconst BUTTON_LISTING_CLASS = gs.classNameConstants.BUTTON_LISTING_CLASS;\nconst toggleIdVisibility = gs.ui.toggleIdVisibility;\nconst ModalPopUp = gs.ModalPopUp.ModalPopUp;\n\nconst debug = false;\n\nconst extControlsToShowHide = ['user_input_submit', 'voiceMessageRecorder', 'fileUploader'];\nconst VIDEO_OFF = { display: 'none' }\nconst VIDEO_ON = { display: '' };\n\nexport const CameraComponent = ({\n    id,\n    setExternalInputMessage,\n    handleUpdateSize,\n    dispatch,\n    state,\n    question,\n}) => {\n    const [facingMode, setFacingMode] = useState('environment');\n    const [buttonToggle, setButtonToggle] = useState(false);\n    const [photo, setPhoto] = useState(null);\n    const [cameraOn, setCameraOn] = useState(true)\n\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const stream = useRef(null);\n    \n    const startCamera = async () => {\n        try {\n            stream.current = await navigator.mediaDevices.getUserMedia({ video: true });\n            videoRef.current.srcObject = stream.current;\n        } catch (error) {\n            console.error('Error accessing camera:', error);\n        }\n    }\n\n    const toggleCamera = async () => {\n        setFacingMode((prevMode) => (prevMode === 'user' ? 'environment' : 'user'));\n        let constraints = { video: { facingMode: { exact: facingMode } } };\n        stream.current= await navigator.mediaDevices.getUserMedia(constraints);\n        videoRef.current.srcObject = stream.current;\n    };\n    \n    const stopCamera = () => {\n        if (videoRef.current && videoRef.current.srcObject) {\n            const tracks = videoRef.current.srcObject.getTracks();\n            tracks.forEach(track => track.stop());\n            videoRef.current.srcObject = null;\n        }\n    };\n\n    const takePhoto = () => {\n        const video = videoRef.current;\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const dataUrl = canvas.toDataURL('image/jpeg');\n        setPhoto(dataUrl);\n    };\n\n    const cameraOnOff = (newState) => {\n        if (!newState) {\n            stopCamera();\n        } else {\n            startCamera();\n        }\n        setCameraOn(newState);\n    }\n\n    const sendPhoto = async () => {\n        if (!question) {\n            alert('Please enter a question before upload the photo.');\n            return;\n        }\n        if (!photo) {\n            alert('Please click on the \"Open Camera\" icon and take a photo.');\n            return;\n        }\n        const formData = new FormData();\n        // Convert base64 to Blob before appending to formData\n        const base64Response = await fetch(photo);\n        const blob = await base64Response.blob();\n        const fileExtension = 'jpg';\n        const timestamp = new Date().toISOString().replace(/[-:.]/g, '_').slice(0, -5);\n        const fileName = `image_capture_${timestamp}.${fileExtension}`;\n        const fileSize = blob.size / (1024 * 1024).toFixed(2); // Size in Mb\n        formData.append('file', blob, fileName);\n        const options = {\n            raw_body: true,\n            headers: MULTIPART_FORM_DATA_HEADER\n        };\n        const db = new dbApiService({ url: \"ai/image_to_text\" });\n        const query = {\n            \"cid\": state.currentConversationId,\n            question: question,\n            file_name: fileName,\n        }\n        addMessageToConversation(question, \"user\", dispatch);\n        addMessageToConversation(\n            '```File Attachment: \"' + fileName + '\" (' + fileSize + ' Mb)```', \"attachment\",\n            dispatch\n        );\n        // Empty external input message\n        setExternalInputMessage(\"\");\n        // Update the size of the input text area if the handleUpdateSize function is provided.\n        if (handleUpdateSize) {\n            handleUpdateSize();\n        }\n        // Show WaitAnimation while fetching data\n        dispatchWaitAnimation(true, dispatch);\n        db.getAll(query, formData, 'POST', options).then(\n            data => {\n                if (debug) {\n                    console_debug_log(\"FileUploader | handleUpload | data:\", data);\n                }\n                dispatchWaitAnimation(false, dispatch);\n                if (debug) {\n                    console_debug_log(`FileUploader is calling checkConversationIdChange(\"${data}\")`);\n                }\n                // addMessageToConversation(data.response, \"assistant\", dispatch);\n                checkConversationIdChange(state, dispatch, data).then(\n                    () => {\n                        // Current conversation updated sucssesfuly\n                    },\n                    error => {\n                        error = formatCaughtError(error);\n                        if (debug) {\n                            console_debug_log(\"FileUploader | checkConversationIdChange | ERROR:\", error);\n                        }\n                        setChatbotErrorMsg(error.message, dispatch);\n                    }\n                );\n                setButtonToggle(false);\n            },\n            error => {\n                // Hide WaitAnimation after the error\n                error = formatCaughtError(error);\n                if (debug) {\n                    console_debug_log(\"FileUploader | handleUpload | ERROR:\", error);\n                }\n                dispatchWaitAnimation(false, dispatch);\n                console.error('Error upploading the file:', error);\n                // setExternalErrorMsg(error.message);\n                setChatbotErrorMsg(error.message, dispatch);\n            }\n        );\n        stopCamera();\n        setPhoto(null);\n        setButtonToggle(false);\n        toggleIdVisibility(\"on\", extControlsToShowHide);\n    };\n\n    return (\n        <div\n            id={id}\n            className=\"camera-capture\"\n        >\n            <div\n                className='min-w-full w-full flex items-center mr-3'\n            >\n                <button\n                    onClick={() => {\n                        if(buttonToggle) {\n                            stopCamera();\n                            setPhoto(null);\n                        } else {\n                            startCamera();\n                        }\n                        setButtonToggle(buttonToggle ? false : true);\n                        toggleIdVisibility((buttonToggle ? \"on\" : \"off\"), extControlsToShowHide);\n                    }}\n                    className={`${BUTTON_LISTING_CLASS} mr-2`}\n                    title={buttonToggle ? 'Close' : 'Start Camera'}\n                >\n                    {/* <FontAwesomeIcon icon={buttonToggle ? 'times' : 'camera'} size='lg' /> */}\n                    <GsIcons icon={buttonToggle ? 'times' : 'camera'} size='lg'/>\n                </button>\n                {buttonToggle && (\n                    <>\n                        <button\n                            onClick={() => cameraOnOff(!cameraOn)}\n                            className={`${BUTTON_LISTING_CLASS} mr-2`}\n                            title='Start Camera'\n                        >\n                            {/* <FontAwesomeIcon icon='camera-retro' size='lg'/> */}\n                            <GsIcons icon='camera-retro' size='lg'/>\n                        </button>\n                        <button\n                            onClick={sendPhoto}\n                            className={`${BUTTON_LISTING_CLASS} mr-2`}\n                            title='Send Photo'\n                        >\n                            {/* <FontAwesomeIcon icon='arrow-up' size='lg'/> */}\n                            <GsIcons icon='arrow-up' size='lg'/>\n                        </button>\n                        {photo && (\n                            <img\n                                src={photo}\n                                alt=\"Captured\"\n                                className='mr-2'\n                                style={{ width: '30px', height: '30px' }}\n                            />)\n                        }\n                        <div className=\"video-container\">\n                            {\n                                (cameraOn && (\n                                    <ModalPopUp\n                                        closeButtonAction={() => cameraOnOff(!cameraOn)}\n                                        secondButtonMessage='Change Front/Back'\n                                        secondButtonAction={toggleCamera}\n                                        primaryButtonMessage='Take Photo'\n                                        primaryButtonAction={takePhoto}\n                                        allowOnHide={false}\n                                    >\n                                        <video\n                                            ref={videoRef}\n                                            autoPlay\n                                            playsInline\n                                        />\n                                        <canvas\n                                            ref={canvasRef}\n                                            className='mt-2 w-full'\n                                            style={photo ? VIDEO_ON : VIDEO_OFF } \n                                        />\n                                    </ModalPopUp>\n                                ))\n                            }\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport { VoiceMessageRecorder } from './VoiceMessageRecorder.jsx';\nimport { FileUploader } from './FileUploader.jsx';\nimport { CameraComponent } from './CameraComponent.jsx';\n\nimport {\n    handleCancelProcessing,\n    sendMessageToBot,\n    checkConversationIdChange,\n} from \"./chatbot.db.operations.jsx\";\n\nimport {\n    // setChatbotInputMessage,\n    setChatbotErrorMsg,\n} from './chatbot.general.functions.jsx';\n\n/*\nWarning: Failed prop type: Invalid prop `size` of value `m` supplied to `FontAwesomeIcon`,\nexpected one of [\"2xs\",\"xs\",\"sm\",\"lg\",\"xl\",\"2xl\",\"1x\",\"2x\",\"3x\",\"4x\",\"5x\",\"6x\",\"7x\",\"8x\",\"9x\",\"10x\"].\n*/ \n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faGreaterThan,\n//     faStop,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faGreaterThan,\n//     faStop,\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst usePlainFetch = gs.responseHandlersService.usePlainFetch;\nconst growUpTextArea = gs.ui.growUpTextArea;\nconst resetTextArea = gs.ui.resetTextArea;\nconst toggleIdVisibility = gs.ui.toggleIdVisibility;\nconst formatCaughtError = gs.errorAndReenter.formatCaughtError;\nconst WaitAnimation = gs.waitAnimationUtility.WaitAnimation;\nconst getFilenameFromContentDisposition = gs.blobFilesUtilities.getFilenameFromContentDisposition;\nconst responseHasFile = gs.blobFilesUtilities.responseHasFile;\nconst BUTTON_LISTING_CLASS = gs.classNameConstants.BUTTON_LISTING_CLASS;\n// const INPUT_FLEXIBLE_CLASS = gs.classNameConstants.INPUT_FLEXIBLE_CLASS;\n\nconst debug = false;\n\nconst userInputViewportHeight = 80;\n/* <UserInput>.userInputViewportHeight must be the same as \".conversation-block.height\" in ChatBot.css */\n/* 81 for 81vh, 78 for 78vh, an so on */\nconst userInputMaxOffsetHeight = 200;\n\nexport const UserInput = ({\n    dispatch,\n    state,\n    userQuestion, // state.inputMessage\n}) => {\n    const [inputMessage, setInputMessage] = useState(userQuestion);\n    const [updateSize, setUpdateSize] = useState(false);\n\n    useEffect(() => {\n        setInputMessage(state.inputMessage);\n    }, [state.inputMessage]);\n\n    useEffect(() => {\n        // Adjust text area size\n        resetTextArea(\"user_input\", \"conversation-block\", userInputViewportHeight, userInputMaxOffsetHeight);\n    }, [updateSize]);\n\n    // Function to handle adjust text area size on input change from external component\n    const handleUpdateSize = () => {\n        setUpdateSize(!updateSize)\n    };\n\n    // Function to handle input change\n    const handleInputChange = (e) => {\n        /* IMPORTANT:\n           ONLY one call to a useState() is allowed when external component\n           calls a internal function or useState.\n           THE SOLUTION IS: pass the various function or useState to the external component\n           and call them one after another from it.\n        */\n        if (typeof e === \"string\") {\n            setInputMessage(e);\n            // setExternalInputMessage(e); // Update the external input message\n        } else {\n            if (debug) {\n                console_debug_log(`InputBlock | handleInputChange: \"${e}\"`);\n            }\n            setInputMessage(e.target.value);\n            // setExternalInputMessage(e.target.value); // Update the external input message\n        }\n        // setUpdateSize(!updateSize);\n    };\n\n    // Function to handle sending a message\n    const sendMessage = async (newInputMessage = null) => {\n        const extControlsToShowHide = ['fileUploader', 'voiceMessageRecorder', 'cameraComponent'];\n        const botReplyDebug = false;\n        if (newInputMessage === null) {\n            newInputMessage = inputMessage;\n        }\n        if (typeof newInputMessage !== \"undefined\" && newInputMessage !== null && newInputMessage.trim() !== \"\") {\n            // Dispatch the message to the chat\n            const userMessage = { content: newInputMessage, role: 'user' }; // Adjust structure as needed\n            dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\n            // // Set external (global) input message [Deprecated]\n                // setChatbotInputMessage(newInputMessage, dispatch);\n            // Clear the user input\n            setInputMessage('');\n            // Adjust text area size\n            handleUpdateSize();\n            // Hide buttons other than the stop\n            toggleIdVisibility((\"off\"), extControlsToShowHide);\n            // Send the message to the bot and get the response\n            const botReply = await sendMessageToBot(newInputMessage, state, dispatch);\n            if (botReply.ok) {\n                let continueProcessing = true;\n                if (!usePlainFetch) {\n                    const headers = botReply.response.headers;\n                    if (botReplyDebug) console_debug_log('|||| botReply:', botReply)\n                    if (responseHasFile(headers)) {\n                        if (debug) console_debug_log('|||| OCTET-STREAM | botReply.response.file:', botReply.response.file);\n                        const fileUrl = botReply.response.file;\n                        const filename = getFilenameFromContentDisposition(headers);\n                        const botMessage = { content: botReply.response.response, role: 'assistant', attachment_url: fileUrl, filename: filename };\n                        dispatch({ type: 'ADD_MESSAGE', payload: botMessage });\n                        continueProcessing = false;\n                    }\n                }\n                if (continueProcessing) {\n                    // Add the response to the conversation...\n                    if (botReply.response.response) {\n                        const botMessage = { content: botReply.response.response, role: 'assistant' };\n                        dispatch({ type: 'ADD_MESSAGE', payload: botMessage });\n                    }\n                    // Read current conversation from the database to refresh the chat space\n                    checkConversationIdChange(state, dispatch, botReply.response).then(\n                        () => {\n                            // Current conversation updated sucssesfuly\n                        },\n                        error => {\n                            error = formatCaughtError(error);\n                            console.error('>> Error updating current conversation:', botReply.errorMessage);\n                            setChatbotErrorMsg(error.message, dispatch);\n                        }\n                    );\n                }\n            } else {\n                console.error('>> Error communicating with the bot:', botReply.errorMessage);\n                setChatbotErrorMsg(botReply.errorMessage, dispatch);\n            }\n            toggleIdVisibility((\"on\"), extControlsToShowHide);\n        }\n    };\n\n    return (\n        <div\n            className=\"input-area\"\n        >\n            <textarea\n                name=\"user_input\"\n                id=\"user_input\"\n                value={inputMessage}\n                // TODO: remove INPUT_FLEXIBLE_CLASS and put the css in ChatBot.css\n                // className={`${INPUT_FLEXIBLE_CLASS} mr-2`}\n                className=\"p-2\"\n                aria-label=\"Message AI Assistant...\"\n                rows=\"1\" \n                onChange={handleInputChange}\n                onKeyDown={(event) => {\n                    if (event.key === 'Enter') {\n                        // setInputMessage(event.target.value);\n                        sendMessage();\n                    }\n                }}\n                disabled={state && state.isApiProcessing}\n            />\n            <div>\n                <button\n                    name=\"user_input_submit\"\n                    id=\"user_input_submit\"\n                    onClick={() => (state && state.isApiProcessing ? handleCancelProcessing(dispatch) : sendMessage())}\n                    className={`${BUTTON_LISTING_CLASS} mr-2`}\n                    title={state &&  state.isApiProcessing ? 'Stop Processing' : 'Chat with AI Assistant'}\n                >\n                    {/* <FontAwesomeIcon icon={state && state.isApiProcessing ? 'stop' : 'greater-than'} size='lg'/> */}\n                    <GsIcons icon={state && state.isApiProcessing ? 'stop' : 'greater-than'} size='lg'/>\n                </button>\n            </div>\n            <VoiceMessageRecorder\n                id='voiceMessageRecorder'\n                dispatch={dispatch}\n                // sendMessage={sendMessage}\n                setExternalInputMessage={handleInputChange}\n                handleUpdateSize={handleUpdateSize}\n            />\n            <FileUploader\n                id='fileUploader'\n                question={inputMessage}\n                setExternalInputMessage={handleInputChange}\n                handleUpdateSize={handleUpdateSize}\n                dispatch={dispatch}\n                state={state}\n                // fileTypeFilter=\"image/*\"\n            />\n            <CameraComponent\n                id='cameraComponent'\n                question={inputMessage}\n                setExternalInputMessage={handleInputChange}\n                handleUpdateSize={handleUpdateSize}\n                dispatch={dispatch}\n                state={state}\n            />\n            {state && state.isApiProcessing && \n                <div className=\"ml-2 flex items-center\"><WaitAnimation /></div>\n            }\n            {\n                growUpTextArea(\"user_input\", \"conversation-block\", userInputViewportHeight, userInputMaxOffsetHeight)\n            }\n        </div>\n    )\n}\n    \n","import React from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport './ChatBot.css';\n\nconst BUTTON_LISTING_CLASS = gs.classNameConstants.BUTTON_LISTING_CLASS;\n// const INPUT_FLEXIBLE_CLASS = gs.classNameConstants.INPUT_FLEXIBLE_CLASS;\n\n// const debug = false;\n\nexport const NewConversationButton = ({\n    dispatch,\n    // startNewConversation,\n}) => {\n\n    // Call this when you want to start a new conversation\n    const startNewConversation = () => {\n        // Generate a new conversation ID using UUID for enhanced security\n        // const newConversationId = generateNewConversationId();\n        dispatch({ type: 'START_NEW_CONVERSATION', payload: { conversationId: null } });\n    };\n\n    return (\n        <>\n            <button\n                key='new-conversation-button'\n                onClick={() => startNewConversation()}\n                className={`${BUTTON_LISTING_CLASS} text-xs mb-2`}\n            >\n                New Conversation\n            </button>\n        </>\n    );\n};\n","import React from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport {\n    loadConversation,\n    deleteConversation,\n} from './chatbot.db.operations.jsx';\n\nimport './ChatBot.css';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faTrash,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faTrash,\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst convertId = gs.dbService.convertId;\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst timestampToDate = gs.dateTimestamp.timestampToDate;\n\nconst debug = false;\n\n// const dateColumn = \"creation_date\";\nconst dateColumn = \"update_date\";\n\nexport const ConversationList = ({\n    state,\n    dispatch,\n    showSideBar,\n}) => {\n    const setErrorMsg = (errorMsg) => {\n        dispatch({ type: 'SET_ERROR_MSG', payload: errorMsg });\n    }\n\n    // Handle load conversation\n    const handleLoadConversation = async (conversationId, dispatch) => {\n        if (!showSideBar) {\n            return;\n        }\n        const apiResponse = await loadConversation(conversationId, dispatch);\n        if (debug) console_debug_log('handleLoadConversation | apiResponse:', apiResponse);\n        if (apiResponse.ok) {\n            const data = {\n                conversationId: conversationId,\n                messages: apiResponse.response.messages,\n            }\n            dispatch({ type: 'SET_MESSAGES', payload: data });\n        } else {\n            setErrorMsg(apiResponse.errorMessage);\n        }\n    };\n\n    const confirmDeleteConversation = async (conversationId, dispatch, title) => {\n        if (window.confirm(`'Are you sure you want to delete this conversation?\\n\\n${title}`)) {\n            handleDeleteConversation(conversationId, dispatch);\n        }\n    };\n\n    // Handle delete conversation\n    const handleDeleteConversation = async (conversationId, dispatch) => {\n        const startNew = (conversationId === state.currentConversationId);\n        const apiResponse = await deleteConversation(conversationId, dispatch);\n        if (debug) {\n            console_debug_log(`handleDeleteConversation | conversationId: ${conversationId} | state.currentConversationId: ${state.currentConversationId} | startNew: ${startNew} | apiResponse:`, apiResponse);\n        }\n        if (apiResponse.ok) {\n            dispatch({ type: 'DELETE_CONVERSATION', payload: conversationId });\n            if (startNew) {\n                dispatch({ type: 'START_NEW_CONVERSATION', payload: { conversationId: null } });\n            }\n        } else {\n            setErrorMsg(apiResponse.errorMessage);\n        }\n    };\n\n    const fixTitle = (title) => (title.length === 0 ? \"Empty\" : title);\n\n    const groupConversationsByDate = (conversations) => {\n        const groups = {\n            today: [],\n            yesterday: [],\n            lastSevenDays: [],\n            lastMonth: [],\n            older: {}\n        };\n        const now = new Date();\n        const today = now.setHours(0, 0, 0, 0);\n        const yesterday = new Date(today).setDate(now.getDate() - 1);\n        const sevenDaysAgo = new Date(today).setDate(now.getDate() - 7);\n        const oneMonthAgo = new Date(today).setMonth(now.getMonth() - 1);\n\n        conversations.forEach(conversation => {\n            const timestampUnixEpoch = conversation[dateColumn]*1000;\n            const conversationDate = new Date(timestampUnixEpoch);\n            const conversationTime = conversationDate.setHours(0, 0, 0, 0);\n            if (conversationTime === today) {\n                groups.today.push(conversation);\n            } else if (conversationTime === yesterday) {\n                groups.yesterday.push(conversation);\n            } else if (conversationTime > sevenDaysAgo) {\n                groups.lastSevenDays.push(conversation);\n            } else if (conversationTime > oneMonthAgo) {\n                groups.lastMonth.push(conversation);\n            } else {\n                const monthYear = conversationDate.toLocaleString('default', { month: 'long', year: 'numeric' });\n                if (!groups.older[monthYear]) {\n                    groups.older[monthYear] = [];\n                }\n                groups.older[monthYear].push(conversation);\n            }\n        });\n        return groups;\n    };\n\n    const renderConversations = (conversations) => {\n        return conversations.map(conversation => {\n            const convId = convertId(conversation._id);\n            // console.log('renderConversations | convId: ' + `${convId}_div...`);\n            // console.log('renderConversations | conversation:', conversation);\n            return (\n                <div\n                    key={`${convId}_main_div`}\n                    className=\"conversation-item align-middle flex\"\n                >\n                    <div\n                        key={`${convId}_inner_div`}\n                        style={{ width: '95%'}}\n                    >\n                        <div\n                            key={`${convId}_desc_outter_div`}\n                            style={{ maxWidth: '100%', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                        >\n                            <button\n                                key={`${convId}_desc_button`}\n                                onClick={() => handleLoadConversation(convId, dispatch)}\n                                title={timestampToDate(conversation[dateColumn], true, \" \", false)}\n                            >\n                                <div\n                                    key={`${convId}_desc_inner_div`}\n                                    style={{ maxWidth: '100%', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                                >\n                                    {fixTitle(conversation.title)}\n                                </div>\n                            </button>\n                        </div>\n                    </div>\n                    <div\n                        key={`${convId}_delete_div`}\n                        style={{ width: '5%'}}\n                    >\n                        <button\n                            key={`${convId}_delete_button`}\n                            type=\"button\"\n                            onClick={() => confirmDeleteConversation(convId, dispatch, conversation.title)}\n                            className=\"ml-2 mb-1 bg-blue-500 text-white p-0 rounded close\"\n                        >\n                            {/* <FontAwesomeIcon icon=\"trash\" size='xs' /> */}\n                            <GsIcons icon=\"trash\" size='xs' />\n                        </button>\n                    </div>\n                </div>\n            );\n        });\n    };\n\n    if (!(state && state.conversations)) {\n        return null;\n    }\n\n    const groupedConversations = groupConversationsByDate(state.conversations);\n    return (\n        <div\n            key='conversation_list_main_div'\n            style={{ display: (state.conversationListToggle ? '' : 'none') }}\n        >\n            {groupedConversations.today.length > 0 && (\n                <div key=\"today\">\n                    <h2>Today</h2>\n                    {renderConversations(groupedConversations.today)}\n                </div>\n            )}\n            {groupedConversations.yesterday.length > 0 && (\n                <div key=\"yesterday\">\n                    <h2>Yesterday</h2>\n                    {renderConversations(groupedConversations.yesterday)}\n                </div>\n            )}\n            {groupedConversations.lastSevenDays.length > 0 && (\n                <div key=\"lastSevenDays\">\n                    <h2>Last 7 Days</h2>\n                    {renderConversations(groupedConversations.lastSevenDays)}\n                </div>\n            )}\n            {groupedConversations.lastMonth.length > 0 && (\n                <div key=\"lastMonth\">\n                    <h2>Last Month</h2>\n                    {renderConversations(groupedConversations.lastMonth)}\n                </div>\n            )}\n            {Object.keys(groupedConversations.older).map(monthYear => (\n                <div key={\"month_year_\" + monthYear}>\n                    <h2>{monthYear}</h2>\n                    {renderConversations(groupedConversations.older[monthYear])}\n                </div>\n            ))}\n        </div>\n    );\n}\n","import React from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport { setConversationListToggle } from './chatbot.general.functions.jsx';\n\nimport './ChatBot.css';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faGreaterThan,\n//     faLessThan,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faGreaterThan,\n//     faLessThan,\n// );\n\nconst ToggleSideBar = gs.NavLib.ToggleSideBar;\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\n\nexport const ConversationsToggleButton = ({\n    state,\n    dispatch,\n}) => {\n    if (debug) {\n        console_debug_log('ConversationsToggleButton...');\n    }\n    return (\n        <>\n            {/* <button\n                key='conversation-list-toggle-button'\n                type='button'\n                className=\"bg-white border-none focus:outline-none\"\n                onClick={() => setConversationListToggle(!state.conversationListToggle, dispatch)}\n            >\n                <FontAwesomeIcon\n                    icon={state.conversationListToggle ? 'less-than' : 'greater-than'}\n                    size='xl'\n                    style={{ color: 'lightgray' }}\n                />\n            </button> */}\n            <ToggleSideBar\n                key='conversation-list-toggle-button'\n                onClick={() => setConversationListToggle(!state.conversationListToggle, dispatch)}\n            >\n            </ToggleSideBar>\n        </>\n    )\n}\n","import React, { useState, useRef } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport './AudioPlayer.css';\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faPlay,\n//     faStop,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faPlay,\n//     faStop,\n// );\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst WARNING_MSG_CLASS = gs.classNameConstants.WARNING_MSG_CLASS;\nconst defaultFilenametoDownload = gs.blobFilesUtilities.defaultFilenametoDownload;\nconst decodeBlob = gs.blobFilesUtilities.decodeBlob;\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\nconst browserAudioController = true;\n\nconst AudioPlayer = ({ blobUrl, filename, expired, errorMsgSuffix }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioPlayer = useRef(); // reference to the audio component\n\n  const fixBlob = () => {\n    if (!blobUrl) {\n      return;\n    }\n    fetch(blobUrl).then(r => {\n      r.blob().then(blob => {\n        const reader = new FileReader();\n        // reader.readAsDataURL(blob);  // Convert to data:audio/mpeg;base64,Ly9Qa3h...\n        reader.readAsText(blob);  // No convertion at all... just get what it receives...\n        reader.onloadend = function() {\n          const newBlobUrl = decodeBlob(reader.result, filename);\n          audioPlayer.current.src = newBlobUrl;\n          audioPlayer.current.play();\n        }\n      });\n    });\n  };\n\n  // Play & Pause toggle function\n  const togglePlayPause = () => {\n    const prevValue = isPlaying;\n    setIsPlaying(!prevValue);\n    if (!prevValue) {\n      audioPlayer.current.play().catch(error => {\n        if (debug) console_debug_log(\"AudioPlayer | togglePlayPause | error:\", error, 'error.message:', error.message);\n        const errorMsgs = [\n            \"Failed to load because no supported source was found.\",\n            \"The element has no supported sources.\",\n        ]\n        if (Object.values(errorMsgs).some(msg => error.message.includes(msg))) {\n          // Probably the data comes from AWS API Gateway in Base64 format\n          // Try to convert Base64 to Binary\n          fixBlob();\n        } else {\n          console.error(error);\n        }\n      });\n    } else {\n      audioPlayer.current.pause();\n    }\n  };\n\n  // Update the current time\n  const onPlaying = () => {\n    setCurrentTime(audioPlayer.current.currentTime);\n    setDuration(audioPlayer.current.duration);\n    if (audioPlayer.current.duration === audioPlayer.current.currentTime) {\n      setIsPlaying(false);\n    }\n  };\n\n  // Adjust current time as per the slider\n  const onScrub = (value) => {\n    setCurrentTime(value);\n    audioPlayer.current.currentTime = value;\n    if (!isPlaying) {\n      togglePlayPause();\n    }\n  };\n\n  // Download the audio file\n  const downloadAudio = () => {\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.setAttribute('download', filename ? filename : defaultFilenametoDownload); // or any other format\n    document.body.appendChild(link);\n    link.click();\n  };\n\n  if (expired) {\n    return (\n      <div\n        className={WARNING_MSG_CLASS}\n      >\n        {`Audio file expired${errorMsgSuffix}`}\n      </div>\n    );\n  }\n\n  if (browserAudioController) {\n    return (\n      <>\n        <audio ref={audioPlayer} src={blobUrl} controls onBeforeInput={togglePlayPause} />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"audio-player\">\n      <audio ref={audioPlayer} src={blobUrl} onTimeUpdate={onPlaying} />\n      <button\n        onClick={togglePlayPause}\n        className=\"play-button\"\n      >\n          {/* <FontAwesomeIcon icon={isPlaying ? 'stop' : 'play'} size='sm'/> */}\n          <GsIcons icon={isPlaying ? 'stop' : 'play'} size='sm'/>\n      </button>\n      <input\n        type=\"range\"\n        value={currentTime}\n        step=\"1\"\n        min=\"0\"\n        max={duration}\n        onChange={(e) => onScrub(e.target.value)}\n      />\n      <div className=\"menu\">\n        <button onClick={() => {}}>...</button>\n        <div className=\"menu-content\">\n          <button onClick={downloadAudio}>Download</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n","import React, { useEffect } from 'react'\n\nimport * as gs from \"genericsuite\";\n\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\n\nexport const GoToTheBottom = ({ elementId, elementsToRender }) => {\n    const objDiv = document.getElementById(elementId);\n    if (debug) {\n        console_debug_log(`GoToTheBottom (${elementId}) | objDiv:`, objDiv)\n    }\n    useEffect(() => {\n        if (objDiv && elementsToRender !== '') {\n            // objDiv.scrollIntoView(false);\n            objDiv.scrollTop = objDiv.scrollHeight;\n            if (debug) {\n                console_debug_log(`GoToTheBottom (${elementId}) | objDiv.scrollTop: ${objDiv.scrollTop} | objDiv.scrollHeight: ${objDiv.scrollHeight}`)\n            }\n            // Sometimes it needs a second change, specially when the object is being populated\n            // objDiv.scrollTop = objDiv.scrollHeight;\n        }\n    }, [objDiv, elementsToRender, elementId]);\n    return (<></>);\n}\n","import React, { useEffect } from 'react'\n\nimport * as gs from \"genericsuite\";\n\nimport \"./ScrollToBottomButton.css\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import fontawesome from \"@fortawesome/fontawesome\";\n// import {\n//     faArrowDown,\n// } from \"@fortawesome/fontawesome-free-solid\";\n// fontawesome.library.add(\n//     faArrowDown,\n// );\n\nconst GsIcons = gs.IconsLib.GsIcons;\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\n\nexport const ScrollToBottomButton = ({ elementId, elementsToRender }) => {\n    const element = document.getElementById(elementId);\n\n    const scrollToBottom = () => {\n        if (element) {\n            element.scrollTop = element.scrollHeight;\n        }\n    };\n\n    useEffect(() => {\n        if (element && elementsToRender !== '') {\n            // let lastScrollTop =\n            //     element.scrollY || element.scrollTop;\n            element.addEventListener(\n                'scroll',\n                function handleScroll() {\n                    // const scrollTopPosition =\n                    //     element.scrollY || element.scrollTop;\n                    // if (scrollTopPosition > lastScrollTop) {\n                    //     console.log('scrolling down');\n                    // } else if (scrollTopPosition < lastScrollTop) {\n                    //     console.log('scrolling up');\n                    // }\n                    // lastScrollTop =\n                    //     scrollTopPosition <= 0 ? 0 : scrollTopPosition;\n                    showDebugInfo(element, elementId);\n                    const buttonElement = document.getElementById('scroll-overfolw-button');\n                    buttonElement.style.visibility=(showButton(element));    \n                },\n                false,\n            );\n        }\n    }, [element, elementsToRender, elementId]);\n\n    showDebugInfo(element, elementId);\n    return (\n        <div\n            id='scroll-overfolw-button'\n            style={{visibility: showButton(element)}}\n        >\n            <button\n                onClick={scrollToBottom}\n                className=\"float\"\n            >\n                    <i className=\"a fa-plus my-float\">\n                        {/* <FontAwesomeIcon icon='arrow-down' size='lg'/> */}\n                        <GsIcons icon='arrow-down' size='lg'/>\n                    </i>\n            </button>\n        </div>\n    )\n}\n\nconst showButton = (element) => (\n    ((element && element.scrollHeight > element.scrollTop+element.clientHeight) ? 'visible' : 'hidden')\n);\n\nconst showDebugInfo = (element, elementId) => {\n    if (debug && element) {\n        console_debug_log(` ScrollToBottomButton (${elementId}) | showButton: ${showButton(element)} | element.scrollTop: ${element.scrollTop} | element.scrollHeight: ${element.scrollHeight} |  element.clientHeight: ${ element.clientHeight} | element.offsetHeight: ${element.offsetHeight}`);\n    }\n}\n","import React from 'react';\n\n///////////////////////////\n\n// https://github.com/react-syntax-highlighter/react-syntax-highlighter\n\n// https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_HLJS.MD\n// https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_PRISM.MD\n// \"Prism\" has more supported languages and the most intenresting, comprared with  \"HLJS\"\n\nimport { Prism, Light } from 'react-syntax-highlighter';\nimport { vscDarkPlus as shStyleforPrism } from 'react-syntax-highlighter/dist/cjs/styles/prism/index.js';\nimport { grayscale as shStyleForLight } from 'react-syntax-highlighter/dist/cjs/styles/hljs/index.js';\n\n///////////////////////////\n\nimport * as gs from \"genericsuite\";\n\nconst LinkifyText = gs.ui.LinkifyText;\nconst CopyButton = gs.ui.CopyButton;\n\nexport const ChatCodeBlock = ({ children, shType = \"prism\" }) => {\n    // Regular expression to match code blocks enclosed in ```\n    const codeRegex = /```([\\s\\S]*?)```/g;\n\n    // Split content into parts with and without code blocks\n    const parts = children.split(codeRegex);\n\n    return (\n        <div>\n            {parts.map((part, index) => {\n                if (index % 2 === 0) {\n                    // Render non-code parts as regular text\n                    // return <span key={index}>{part}</span>;\n                    return (\n                        <LinkifyText\n                            key={`${index}-other`}\n                        >\n                            {part}\n                        </LinkifyText>\n                    );\n                } else {\n                    // Render code blocks with specified styles\n                    let content = part.trim()\n                    const language = content.split('\\n')[0];\n                    content = content.substring(language.length + 1).trim();\n                    return (\n                        <>\n                            <div style={{ position: 'relative' }}>\n                                <div\n                                    key={`${index}-language`}\n                                    style={{\n                                        backgroundColor: 'rgb(30, 30, 30)',\n                                        color: 'wheat',\n                                        marginTop: '10px',\n                                        padding: '10px',\n                                        // borderRadius: '5px',\n                                        overflowX: 'auto',\n                                    }}\n                                >\n                                    {language}\n                                </div>\n                                <div\n                                    key={`${index}-content`}\n                                >\n                                    {shType===\"prism\" && (\n                                        <Prism\n                                            language={language} \n                                            style={shStyleforPrism}\n                                            wrapLongLines={true}\n                                        >\n                                            {content}\n                                        </Prism>\n                                    )}   \n                                    {shType!==\"prism\" && (\n                                        <Light\n                                            language={language} \n                                            style={shStyleForLight}\n                                            wrapLongLines={true}\n                                        >\n                                            {content}\n                                        </Light>\n                                    )}   \n                                    <CopyButton text={content} />\n                                </div>\n                            </div>\n                        </>\n                    );\n                }\n            })}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport AudioPlayer from './AudioPlayer.jsx';\nimport { GoToTheBottom } from './GoToTheBottom.jsx'\nimport { ScrollToBottomButton } from './ScrollToBottomButton.jsx'\nimport { ChatCodeBlock } from './ChatCodeBlock.jsx';\n\nimport './ChatBot.css';\n\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst usePlainFetch = gs.responseHandlersService.usePlainFetch;\nconst getFileExtension = gs.blobFilesUtilities.getFileExtension;\nconst performDownload = gs.blobFilesUtilities.performDownload;\nconst INFO_MSG_CLASS = gs.classNameConstants.INFO_MSG_CLASS;\nconst WARNING_MSG_CLASS = gs.classNameConstants.WARNING_MSG_CLASS;\n\nconst debug = false;\nconst defaultDownloadFilename = 'file_with_no_name.mp3'\n\nexport const ConversationBlock = ({\n    id,\n    state,\n    handleRetry,\n}) => {\n    const [elementsToRender, setElementsToRender] = useState('');\n\n    if (debug) {\n        console_debug_log(`ConversationBlock | state.errorMsg: ${state.errorMsg} | state:`, state);\n    }\n\n    const formatMessage = (messageObject) => {\n        let message = messageObject.content;\n        const hasDownloadFileToken = message && message.includes(\"[SEND_FILE_BACK]\");\n        const downloadedFilename = hasDownloadFileToken ? message.replace(\"[SEND_FILE_BACK]=\", \"\").split('/').pop() : null;\n        const url = typeof messageObject.attachment_url !== \"undefined\" ? messageObject.attachment_url : null;\n        const hasAttachment = (url !== null || hasDownloadFileToken);\n        let filename = typeof messageObject.filename !== \"undefined\" ? messageObject.filename : downloadedFilename; \n        const extension = filename ? getFileExtension(filename) : null;\n        let errorMsgSuffix = usePlainFetch ? \" (No headers allowed)\" : \"\";\n        if (hasAttachment && extension) {\n            if (['wav', 'mp3'].includes(extension.toLowerCase())) {\n                return (\n                    <AudioPlayer\n                        blobUrl={url}\n                        filename={filename}\n                        expired={hasDownloadFileToken}\n                        errorMsgSuffix={errorMsgSuffix}\n                    />\n                );\n            } else {\n                if (hasDownloadFileToken) {\n                    return (\n                        <p\n                            className={WARNING_MSG_CLASS}\n                            title={filename}\n                        >\n                            {(['wav', 'mp3'].includes(extension.toLowerCase()) ? \"Audio file link\" : \"Link\") + ` expired...${errorMsgSuffix}`}\n                        </p>\n                    )\n                }\n                // Link to download the file calling the performDownload function   \n                return (\n                    <button\n                        className={INFO_MSG_CLASS}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            performDownload(url, filename);\n                        }}\n                    >\n                        {(message ? message : `Click here to download the \"${filename}\" file`)+errorMsgSuffix}\n                    </button>\n                );\n            }\n        }\n        if (hasAttachment || (message && message.startsWith('```File'))) {\n            if (message && message.startsWith('```')) {\n                message = message.substring(3, message.length - 3);\n                const firstWord = message.split(' ')[0];\n                message = message.substring(firstWord.length + 1).trim();\n            }\n            if (hasAttachment && !message) {\n                if (!filename) {\n                    filename = defaultDownloadFilename;\n                    errorMsgSuffix += (errorMsgSuffix.trim() === '' ? '' : '.') + ' WARNING: no file name received. Fix the Backend API to send headers.'\n                }\n                message = filename;\n            }\n            return (\n                <div style={{backgroundColor: 'white'}}>\n                    <div style={{maxWidth: 'fit-content', border: '1px solid black', borderRadius: '5px', backgroundColor: '#f2f2f2', padding: '10px'}}>\n                        {hasAttachment && (\n                            <a\n                                href={messageObject.attachment_url}\n                                target='_blank'\n                                rel=\"noreferrer\"\n                                style={{color: 'black', fontWeight: 'bold'}}\n                            >\n                                {message+errorMsgSuffix}\n                            </a>\n                        )}\n                        {!hasAttachment && (\n                            <>{message+errorMsgSuffix}</>\n                        )}\n                    </div>\n                    {hasAttachment && ['jpg', 'jpeg', 'gif', 'png', 'svg', 'bmp', 'webp', 'tiff'].includes(String(getFileExtension(messageObject.attachment_url)).toLowerCase()) && (\n                            <div className='mt-2'>\n                                <img\n                                    className='rounded-md'\n                                    src={messageObject.attachment_url}\n                                    alt={`Attachment: ${message}`}\n                                    style={{maxHeight: 'auto', width: 'fit-content', maxWidth: '100%'}}\n                                />\n                            </div>\n                        )\n                    }\n                </div>\n            );\n        }\n        let shType = \"prism\";\n        // if (message.includes('\\n')) {\n        //     // https://www.markdownguide.org/basic-syntax/\n        //     // message.replace(/\\n/g, '<BR/>');\n        //     message = '```markdown```' + message;\n        //     shType = \"hljs\";\n        // }\n        if (message.includes('```plaintext```')) {\n            shType = \"hljs\";\n        }\n        return (\n            <>\n                <ChatCodeBlock\n                    shType={shType}\n                >\n                    {message}\n                </ChatCodeBlock>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        setElementsToRender(state.messages.map((message, index) => (\n            <div key={index} className=\"message\">\n                <div className={`message-content ${message.role === 'user' ? 'user-message' : 'bot-message'}`}>\n                    {formatMessage(message)}\n                </div>\n            </div>\n        )));\n    }, [state.messages])\n\n    return (\n        <>\n            <div\n                id={id ? id : \"conversation-block\"}\n                className=\"conversation-block\"\n            >\n                {state && !state.errorMsg && state.messages && elementsToRender}\n            </div>\n            <ScrollToBottomButton\n                elementId='conversation-block'\n                elementsToRender={elementsToRender}\n            />\n            <GoToTheBottom\n                elementId='conversation-block'\n                elementsToRender={elementsToRender}\n            />\n        </>\n    );\n}\n","import React, { useEffect, useReducer } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport {\n    setChatbotInputMessage,\n    setChatbotErrorMsg,\n} from './chatbot.general.functions.jsx';\n\nimport { UserInput } from './UserInput.jsx';\nimport {\n    fetchConversations,\n} from './chatbot.db.operations.jsx';\nimport { NewConversationButton } from './NewConversationButton.jsx';\nimport { ConversationList } from './ConversationList.jsx';\nimport { ConversationsToggleButton } from './ConversationsToggleButton.jsx';\nimport { ConversationBlock } from './ConversationBlock.jsx';\n\nimport './ChatBot.css';\n\nconst convertId = gs.dbService.convertId;\nconst console_debug_log = gs.loggingService.console_debug_log;\nconst isMobileDevice = gs.ui.isMobileDevice;\nconst getUrlParams = gs.urlParams.getUrlParams;\nconst errorAndReEnter = gs.errorAndReenter.errorAndReEnter;\nconst useUser = gs.UserContext.useUser;\n\nconst debug = false;\n\nconst urlParams = getUrlParams();\n\n// A reducer function for chat state management\nconst chatReducer = (state, action) => {\n    switch (action.type) {\n\n        // Messages\n    \n        case 'ADD_MESSAGE':\n            // Adds a new message to the chat history\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            };\n\n        case 'SET_MESSAGES':\n            if(debug) {\n                console_debug_log(\" ChatReducer | SET_MESSAGES | action:\", action);\n            }\n            return {\n                ...state,\n                // Payload has an array of messages and the conversationId\n                currentConversationId: action.payload.conversationId,\n                messages: action.payload.messages,\n            };\n\n        // Conversations\n\n        // TODO\n        case 'CLEAR_CHAT':\n            // Clears the chat history\n            return {\n                ...state,\n                messages: []\n            };\n\n        case 'START_NEW_CONVERSATION':\n            return {\n                ...state,\n                currentConversationId: action.payload.conversationId,\n                messages: []\n            };\n\n        case 'SET_CONVERSATION_ID':\n            return {\n                ...state,\n                currentConversationId: action.payload,\n            };\n\n        // Conversation List\n\n        case 'SET_CONVERSATIONS':\n            return {\n                ...state,\n                conversations: action.payload\n            };\n\n        case 'DELETE_CONVERSATION':\n            return {\n                ...state,\n                conversations: state.conversations.filter(conversation => convertId(conversation._id) !== action.payload)\n            };\n\n        // Bot\n    \n        case 'API_PROCESSING_STATUS':\n            return {\n                ...state,\n                isApiProcessing: action.payload\n            };\n\n        case 'SET_INPUT_MESSAGE':\n            return {\n                ...state,\n                inputMessage: action.payload\n            };\n            \n        case 'SET_CONVERSATION_LIST_TOGGLE':\n            return {\n                ...state,\n                conversationListToggle: action.payload\n            };\n            \n        case 'SET_ERROR_MSG':\n            return {\n                ...state,\n                errorMsg: action.payload\n            };\n\n        // Current user\n\n        case 'SET_CURRENT_USER':\n            return {\n                ...state,\n                // Payload has the currentUser data\n                currentUser: action.payload,\n            };\n\n        // Not registered action\n    \n        default:\n            if(debug) {\n                console_debug_log(\"ChatReducer | NOT REGISTERED ACTION:\", action, \"|| state:\", state);\n            }\n            return state;\n    }\n};\n\n// Chatbot main component\n\nexport const ChatBot = ({\n    userQuestion = (urlParams.q ? decodeURIComponent(urlParams.q) : ''),\n    showSideBar = !(urlParams.ssb && urlParams.ssb === \"0\")\n}) => {\n    const { currentUser } = useUser();\n    const [state, dispatch] = useReducer(chatReducer, {\n        messages: [],\n        conversations: [],\n        currentConversationId: null,\n        isApiProcessing: false,\n        isTyping: false,\n        inputMessage: userQuestion,\n        conversationListToggle: !isMobileDevice(),\n        errorMsg: null,\n        currentUser: currentUser,\n    });\n\n    const columnSizeList = () =>\n        (showSideBar && state.conversationListToggle ? (isMobileDevice() ? '70%' : '30%') : \"0%\")\n\n    const columnSizeMessages = () =>\n        (showSideBar && state.conversationListToggle ? (isMobileDevice() ? '30%' : '70%') : \"100%\")\n    \n    if (debug) {\n        console_debug_log(\"AiAssistant STATE:\", state);\n        console_debug_log(\"AiAssistant Main | state.errorMsg:\", state.errorMsg);\n    }\n\n    // If there's an initial UserQuestion, send it inmediatelly to the LLM\n    // useEffect(() => {\n    //     if (userQuestion !== '') {\n    //         sendMessage(userQuestion);\n    //     }\n    // }, [userQuestion, sendMessage]);\n\n    const handleRetry = (e) => {\n        if (state && state.messages) {\n            const lastUserMessage = state.messages.slice().reverse().find(\n                message => message.role === 'user' && message.content !== ''\n            );\n            // if (debug) {\n                console_debug_log(\"handleRetry | lastUserMessage:\", lastUserMessage, \"state.messages:\", state.messages);\n            // }\n            if (\n                typeof lastUserMessage !== \"undefined\" &&\n                lastUserMessage !== null &&\n                typeof lastUserMessage[\"content\"] !== \"undefined\"\n            ) {\n                if (debug) {\n                    console_debug_log(`handleRetry | setChatbotInputMessage: ${lastUserMessage.content}`);\n                }\n                setChatbotInputMessage(lastUserMessage.content, dispatch);\n            }\n        }\n        setChatbotErrorMsg(null, dispatch)\n    };\n    \n    // Load conversations\n    useEffect(() => {\n        fetchConversations(dispatch)\n            .then(\n                apiResponse => {\n                    if (debug) {\n                        console_debug_log(`>>> AiAssistant INITIAL useEffect |  apiResponse:`, apiResponse);\n                    }\n                    if (!apiResponse.ok) {\n                        setChatbotErrorMsg(apiResponse.errorMessage, dispatch)\n                    }\n                },\n                error => setChatbotErrorMsg(error, dispatch)\n            );\n    }, []);\n\n    useEffect(() => {\n        dispatch({ type: 'SET_CURRENT_USER', payload: currentUser });\n    }, [currentUser]);\n\n    return (\n        <div className=\"chatbot-container\">\n            {state.errorMsg && (\n                <>\n                    {errorAndReEnter(state.errorMsg, null, null, handleRetry)}\n                </>\n            )}\n            {showSideBar && state.conversationListToggle && (\n                <div\n                    className=\"conversations-list\"\n                    style={{ width: columnSizeList() }}\n                >\n                    <NewConversationButton\n                        dispatch={dispatch}\n                    />\n                    <ConversationList\n                        state={state}\n                        dispatch={dispatch}\n                        showSideBar={showSideBar}\n                    />\n                </div>\n            )}\n            {showSideBar && (\n                <ConversationsToggleButton\n                    state={state}\n                    dispatch={dispatch}\n                />\n            )}\n            <div \n                id=\"message-area\"\n                className=\"message-area\"\n                style={{ width: columnSizeMessages() }}\n            >\n                <ConversationBlock\n                    id=\"conversation-block\"\n                    state={state}\n                    handleRetry={handleRetry}\n                />\n                <UserInput\n                    state={state}\n                    dispatch={dispatch}\n                    userQuestion={state.inputMessage}\n                />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport * as gs from \"genericsuite\";\nimport { ChatBot } from '../ChatBot/ChatBot.jsx';\n// import { ChatBotButton } from '../ChatBotButton/ChatBotButton.jsx';\n\nconst mergeDicts = gs.dictUtilities.mergeDicts;\nconst console_debug_log = gs.loggingService.console_debug_log;\n\nconst debug = false;\n\nconst defaultComponentMap = {\n    \"Chatbot\": ChatBot,\n    // \"ChatBotButton\": ChatBotButton,\n};\n\nexport const App = ({componentMap = {}, appLogo = null}) => {\n    const componentMapFinal = mergeDicts(componentMap, defaultComponentMap);\n    if (debug) console_debug_log(\"GS_AI App | componentMapFinal:\", componentMapFinal);\n    return (\n        <gs.App\n            appLogo={(appLogo === null ? 'gs_ai_logo_circle.svg' : appLogo)}\n            componentMap={componentMapFinal}\n        />\n    );\n}\n","// AI button\n\nimport React, { useState } from 'react';\n\nimport * as gs from \"genericsuite\";\n\nimport { ChatBot } from \"../ChatBot/ChatBot.jsx\"\n\nconst console_debug_log = gs.loggingService.console_debug_log;\n\n// const imageDirectory = gs.generalConstants.imageDirectory;\n// const sparkIcon = gs.spark;\n// Does not work:\n// import SparkIcon from \"../../images/spark.svg\";\nconst GsIcons = gs.IconsLib.GsIcons;\n\nconst debug = false;\nconst sparkClickOpenWindow = true;\n\nexport const ChatBotButton = ({\n    valueElement,\n    chatbot_prompt,\n}) => {\n    const [showLLMPopup, setShowLLMPopup] = useState(false);\n\n    if (debug) {\n        console_debug_log(`ChatBotButton | valueElement: ${valueElement} | document.getElementById(valueElement)| ${document.getElementById(valueElement)} | chatbot_prompt: ${chatbot_prompt}`);\n    }\n\n    const setPrompt = (prompt, valueToReplace) => {\n        return prompt.replace(\"%s\", valueToReplace);\n    }\n    \n    const handleSparkClick = (e) => {\n        e.preventDefault();\n        const inputValue = document.getElementById(valueElement).value;\n        if (inputValue !== \"\") {\n            if (sparkClickOpenWindow) {\n                window.open(\n                    window.location.origin + '/#/chatbot?menu=0&ssb=0&q=' + setPrompt(chatbot_prompt, inputValue),\n                    'AppChatbotPopUp',\n                    'height=600,width=400'\n                );\n            } else {\n                setShowLLMPopup(!showLLMPopup);\n            }\n        }\n    };\n\n    return (\n        <>\n            <div\n                className=\"align-middle flex\"\n            >\n                <div className='ml-2'>\n                    <button\n                        onClick={handleSparkClick}\n                    >\n                        {/* <img src={imageDirectory + sparkIcon} alt=\"Open AI Chat\" /> */}\n                        <GsIcon\n                            icon=\"spark\"\n                            alt=\"Open AI Assistant\"\n                        />\n                    </button>\n                </div>\n            </div>\n            {showLLMPopup && (\n                <div className=\"mt-5\">\n                    <div className=\"llm-popup\">\n                        <ChatBot\n                            userQuestion={setPrompt(chatbot_prompt, document.getElementById(valueElement).value)}\n                            showSideBar={false}\n                        />\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\n","// Components\nimport { App } from './components/App/App.jsx';\nimport { CameraComponent } from './components/ChatBot/CameraComponent.jsx';\nimport { ChatBotButton } from './components/ChatBotButton/ChatBotButton.jsx';\nimport { ChatBot } from './components/ChatBot/ChatBot.jsx';\nimport { ChatCodeBlock } from \"./components/ChatBot/ChatCodeBlock.jsx\";\nimport { ConversationBlock } from \"./components/ChatBot/ConversationBlock.jsx\";\nimport { ConversationList } from \"./components/ChatBot/ConversationList.jsx\";\nimport { ConversationsToggleButton } from \"./components/ChatBot/ConversationsToggleButton.jsx\";\nimport { FileUploader } from './components/ChatBot/FileUploader.jsx';\nimport { NewConversationButton } from \"./components/ChatBot/NewConversationButton.jsx\";\nimport { UserInput } from \"./components/ChatBot/UserInput.jsx\";\nimport { VoiceMessageRecorder } from './components/ChatBot/VoiceMessageRecorder.jsx';\n// Images\nconst gsAiLogoCircle = 'gs_ai_logo_circle.svg'\n\nexport {\n    // Components\n    App,\n    CameraComponent,\n    ChatBotButton,\n    ChatBot,\n    ChatCodeBlock,\n    ConversationBlock,\n    ConversationList,\n    ConversationsToggleButton,\n    FileUploader,\n    NewConversationButton,\n    UserInput,\n    VoiceMessageRecorder,\n    // Images\n    gsAiLogoCircle,\n};\n"],"names":["gs","loggingService","console_debug_log","setChatbotErrorMsg","errorMsg","dispatch","type","payload","setChatbotInputMessage","inputMessage","addMessageToConversation","newMessage","role","systemMessage","content","dispatchWaitAnimation","waitAnimationFlag","setConversationListToggle","conversationListToggle","GsIcons","IconsLib","dbApiService","dbService","MULTIPART_FORM_DATA_HEADER","formatCaughtError","errorAndReenter","toggleIdVisibility","ui","getMediaTypeToRecord","media","mediaSupported","BUTTON_LISTING_CLASS","classNameConstants","debug","extControlsToShowHide","useAxios","process","env","REACT_APP_USE_AXIOS","VoiceMessageRecorder","_ref","id","setExternalInputMessage","handleUpdateSize","sendMessage","isRecording","setIsRecording","useState","audioData","setAudioData","setErrorMsg","mediaRecorderRef","useRef","startRecording","startMediaDevices","stream","navigator","mediaDevices","getUserMedia","audio","mediaType","mediaRecorder","MediaRecorder","current","chunks","ondataavailable","e","push","data","onstop","blob","Blob","concat","start","error","errorMsgAux","console","message","stopRecording","stopMediaDevices","state","stop","sendFile","url","formData","authHeader","queryParams","headers","Object","assign","response","axios","post","params","errorRaw","useEffect","sendVoiceMessage","FormData","extension","split","fileName","appleDevice","sourceLang","other","append","options","raw_body","query_params","db","endpointUrl","REACT_APP_API_URL","getAll","then","React","createElement","className","onClick","title","icon","size","defaultValue","genericEditorUtilities","getCurrentUserId","currentUser","abortController","ApiCall","getActionName","operationType","getRequestMethod","processGoodResponse","responseAttrName","ok","errorMessage","error_message","processErrorResponse","verifyId","the","was_successful","error_in_the","operationName","operationDescription","ActionDescription","requestMethod","query","body","getOne","createRow","updateRow","deleteRow","operationMessage","checkConversationIdChange","externalApiResponse","cid","currentConversationId","apiResponse","fetchConversations","fetchOneConversation","loadConversationList","currentUserId","user_id","conversationId","loadConversation","messages","deleteConversation","sendMessageToBot","messageText","abort","AbortController","chatToSend","JSON","stringify","signal","handleCancelProcessing","FileUploader","question","fileTypeFilter","selectedFile","setSelectedFile","buttonToggle","setButtonToggle","handleFileChange","file","target","files","startsWith","alert","handleUpload","fileSize","toFixed","name","file_name","accept","onChange","ModalPopUp","VIDEO_OFF","display","VIDEO_ON","CameraComponent","facingMode","setFacingMode","photo","setPhoto","cameraOn","setCameraOn","videoRef","canvasRef","startCamera","video","srcObject","toggleCamera","prevMode","constraints","exact","stopCamera","tracks","getTracks","forEach","track","takePhoto","canvas","context","getContext","drawImage","width","height","dataUrl","toDataURL","cameraOnOff","newState","sendPhoto","base64Response","fetch","fileExtension","timestamp","Date","toISOString","replace","slice","Fragment","src","alt","style","closeButtonAction","secondButtonMessage","secondButtonAction","primaryButtonMessage","primaryButtonAction","allowOnHide","ref","autoPlay","playsInline","usePlainFetch","responseHandlersService","growUpTextArea","resetTextArea","WaitAnimation","waitAnimationUtility","getFilenameFromContentDisposition","blobFilesUtilities","responseHasFile","userInputViewportHeight","userInputMaxOffsetHeight","UserInput","userQuestion","setInputMessage","updateSize","setUpdateSize","handleInputChange","value","newInputMessage","arguments","length","undefined","trim","userMessage","botReply","continueProcessing","fileUrl","filename","botMessage","attachment_url","rows","onKeyDown","event","key","disabled","isApiProcessing","NewConversationButton","startNewConversation","convertId","timestampToDate","dateTimestamp","dateColumn","ConversationList","showSideBar","handleLoadConversation","confirmDeleteConversation","window","confirm","handleDeleteConversation","startNew","fixTitle","groupConversationsByDate","conversations","groups","today","yesterday","lastSevenDays","lastMonth","older","now","setHours","setDate","getDate","sevenDaysAgo","oneMonthAgo","setMonth","getMonth","conversation","timestampUnixEpoch","conversationDate","conversationTime","monthYear","toLocaleString","month","year","renderConversations","map","convId","_id","maxWidth","overflow","textOverflow","whiteSpace","groupedConversations","keys","ToggleSideBar","NavLib","ConversationsToggleButton","WARNING_MSG_CLASS","defaultFilenametoDownload","decodeBlob","AudioPlayer","blobUrl","expired","errorMsgSuffix","isPlaying","setIsPlaying","audioPlayer","fixBlob","r","reader","FileReader","readAsText","onloadend","newBlobUrl","result","play","togglePlayPause","prevValue","catch","errorMsgs","values","some","msg","includes","pause","controls","onBeforeInput","GoToTheBottom","elementId","elementsToRender","objDiv","document","getElementById","scrollTop","scrollHeight","ScrollToBottomButton","element","scrollToBottom","addEventListener","handleScroll","buttonElement","visibility","showButton","clientHeight","LinkifyText","CopyButton","ChatCodeBlock","children","shType","codeRegex","parts","part","index","language","substring","position","backgroundColor","color","marginTop","padding","overflowX","Prism","shStyleforPrism","wrapLongLines","Light","shStyleForLight","text","getFileExtension","performDownload","INFO_MSG_CLASS","defaultDownloadFilename","ConversationBlock","handleRetry","setElementsToRender","formatMessage","messageObject","hasDownloadFileToken","downloadedFilename","pop","hasAttachment","toLowerCase","preventDefault","firstWord","border","borderRadius","href","rel","fontWeight","String","maxHeight","isMobileDevice","getUrlParams","urlParams","errorAndReEnter","useUser","UserContext","chatReducer","action","filter","ChatBot","q","decodeURIComponent","ssb","useReducer","isTyping","columnSizeList","columnSizeMessages","lastUserMessage","reverse","find","mergeDicts","dictUtilities","defaultComponentMap","App","componentMap","appLogo","componentMapFinal","ChatBotButton","valueElement","chatbot_prompt","showLLMPopup","setShowLLMPopup","setPrompt","prompt","valueToReplace","handleSparkClick","inputValue","open","location","origin","GsIcon"],"mappings":"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","x_google_ignoreList":[4]}